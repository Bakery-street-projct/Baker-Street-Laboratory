name: Baker Street Laboratory CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio black flake8 mypy
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 implementation/src --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. GitHub editor is 127 chars wide
        flake8 implementation/src --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check implementation/src
    
    - name: Type check with mypy
      run: |
        mypy implementation/src --ignore-missing-imports
      continue-on-error: true  # Don't fail CI on type errors initially
    
    - name: Test with pytest
      env:
        # Mock API keys for testing
        OPENAI_API_KEY: "test-key"
        ANTHROPIC_API_KEY: "test-key"
      run: |
        pytest implementation/tests/ -v --cov=implementation/src --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security checks with bandit
      run: |
        pip install bandit
        bandit -r implementation/src -f json -o bandit-report.json
      continue-on-error: true
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: bandit-report.json

  validate-config:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate YAML configuration
      run: |
        python -c "
        import yaml
        with open('config/agents.yaml', 'r') as f:
            config = yaml.safe_load(f)
        print('✅ Configuration is valid YAML')
        print(f'Found {len(config.get(\"agents\", {}))} agents configured')
        "
    
    - name: Check environment template
      run: |
        if [ ! -f ".env.example" ]; then
          echo "❌ .env.example not found"
          exit 1
        fi
        echo "✅ Environment template exists"
